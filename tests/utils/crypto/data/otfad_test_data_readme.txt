=================================
How to create test data for OTFAD:
- otfad_keyblob.bin
- otfad_image.bin
=================================


1) use elftosb with the following CMD line and BD file to generate SB2 file win non-cryptes sections (because cleartext=1 is used):

[!!PLEASE MIND!!] to generate existing SB file, elftosb source code was modified to use zero value for 'zero_fill' and 'crc' in OTFAD key-blob; 
			by default, there are random values used

elftosb -V -f rt5xx -k "keys\sbkek.txt" -c "commandFile.bd" -o "Output\test_output.sb2" -s keys_and_certs/selfsign_privatekey_rsa2048.pem -S keys_and_certs/selfsign_v3.der.crt -R keys_and_certs/selfsign_v3.der.crt -h "RHKT.bin" "input\boot_image.bin" -d

options {
    flags = 0x8;
    buildNumber = 0x1;
    productVersion = "1.00.00";
    componentVersion = "1.00.00";
    secureBinaryVersion = "2.1";
}

sources {
    inputFile = extern(0);
}

keyblob (0) {
	(start = 0x08001000,
	end = 0x0800F000,
	key = "B1A0C56AF31E98CD6936A79D9E6F829D",
	counter = "5689fab8b4bfb264")
	()
	()
	()
}

section (0;cleartext=1) {
	erase 0x08001000..0x0800F000;

	encrypt(0) {
		load inputFile > 0x08001000;
	}

	keywrap (0) {
		load {{50F66BB4F23B855DCD8FEFC0DA59E963}} > 0x08000000;
	}
	reset;
}

2) Parse SB2 file and copy sections out

    # parse SB2.1 file with OTFAD with plain sections generated by elftosb.exe
    with open('data/test_output_sb_2_1_from_elftosb_OTFAD_plain.sb2', "rb") as f:
        sb_file = f.read()
    img_obj = BootImageV21.parse(sb_file, kek=kek_value, plain_sections=True)
    print(img_obj.info())
    sect = img_obj[0]
    load_cmd = sect[1]
    with open('data/otfad_image.bin', "wb") as f:
        f.write(bytes(load_cmd.data))
    key_blob = sect[2]
    with open('data/otfad_keyblob.bin', "wb") as f:
        f.write(bytes(key_blob.data))
